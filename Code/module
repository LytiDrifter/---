import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, ConversationHandler
from telegramtoken import *
from viev import *
from controller import *
from datetime import datetime
app = Application.builder().token(token).build()
async def mainmenu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Добро пожаловать в бот - орнайзер!')
    await update.message.reply_text('Для взаимодействия с ботом используйте следующие команды:')
    await update.message.reply_text('/create -  создание новой цели')
    await update.message.reply_text('/viev - просмотр текущих целей')
    await update.message.reply_text('/edit - изменить цель')
    await update.message.reply_text('/editfunction - изменить функцию накопления цели')
    await update.message.reply_text('/delete - удалить цель')
    await update.message.reply_text('/arguments - список аргументов')

args = []
counts = {}

class target:
    def __init__(self, name, target, balance, function=None):
        self.name = name
        self.target = target
        self.balance = balance
        self.function = function if function is not None else []

async def argumentsshow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Все аргументы пишутся без пробелов и через запятую.')
    await update.message.reply_text('"+" - оператор сложения.')
    await update.message.reply_text('"-" - оператор вычитания')
    await update.message.reply_text('"/" - оператор деления')
    await update.message.reply_text('"*" - оператор умножения')
    await update.message.reply_text('"**" - оператор возведения в степень')
    await update.message.reply_text('Чтобы задать периодичность действия, после числа, или выражения введите "e", его переодичность в цифрах и ниже представленные отрезки времени в виде операторов ниже предсьавленными аргументами:')
    await update.message.reply_text('"d" - один день')
    await update.message.reply_text('"w" - одна неделя')
    await update.message.reply_text('"m" - один месяц')
    await update.message.reply_text('"y" - один год')
    await update.message.reply_text('Чтобы задать действие в определенное время используйте аргумент "o".')
    await update.message.reply_text('Если вы хотите задать повторяющееся действие, начинающееся в определённую дату, напишите "o", а затем "e" и еденицы измерения даты')
    await update.message.reply_text('Пример функции:')
    await update.message.reply_text('+72ed,-54e2m')


GET_NAME, GET_SUM, GET_BALANCE, GET_FUNCTION = range(4)

async def create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Пожалуйста, введите новую цель')
    return GET_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['targetname'] = update.message.text
    await update.message.reply_text('Введите сумму цели')
    return GET_SUM

async def get_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['targetsum'] = float(update.message.text)
        await update.message.reply_text('Введите начальный баланс счёта')
        return GET_BALANCE
    except ValueError:
        await update.message.reply_text('Ошибка! Введите число')
        return GET_SUM


async def get_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['targetbalance'] = float(update.message.text)
        await update.message.reply_text('Введите функцию цели')
        return GET_FUNCTION
    except ValueError:
        await update.message.reply_text('Ошибка! Введите число')
        return GET_BALANCE


async def get_function(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global targetname
    data = context.user_data
    args.append(targetname)
    targetname = data['targetname']
    targetsum = data['targetsum']
    targetbalance = data['targetbalance']
    targetfunction_list = update.message.text.split(",")


    counts[targetname] = {
        'sum': targetsum,
        'balance': targetbalance,
        'function_args': targetfunction_list
    }

    await update.message.reply_text(f'Цель "{targetname}" создана!')


date = datetime.strptime(date_str, "%d-%m-%Y")
day_of_year = date.timetuple().tm_yday

argumentcount = 0

while argumentcount == args:
    argumentcount = argumentcount + 1

