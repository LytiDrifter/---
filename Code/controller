from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

class Target:
    def __init__(self, name, target, balance, function=None):
        self.name = name
        self.target = target
        self.balance = balance
        self.function = function if function is not None else []

counts = {}
GET_NAME, GET_SUM, GET_BALANCE, GET_FUNCTION = range(4)

async def create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:")
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª–∏:")
    return GET_SUM

async def get_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["sum"] = float(update.message.text)
        await update.message.reply_text("üè¶ –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å:")
        return GET_BALANCE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return GET_SUM

async def get_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["balance"] = float(update.message.text)
        await update.message.reply_text("üîß –í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:")
        return GET_FUNCTION
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return GET_BALANCE

async def get_function(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = Target(
        name=context.user_data["name"],
        target=context.user_data["sum"],
        balance=context.user_data["balance"],
        function=update.message.text.split(",")
    )
    counts[target.name] = target
    await update.message.reply_text(f"‚úÖ –¶–µ–ª—å '{target.name}' —Å–æ–∑–¥–∞–Ω–∞!")
    print(target.name)
    print(target.target)
    print(target.balance)
    print(target.function)
    print(counts[target.name])
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    context.user_data.clear()
    return ConversationHandler.END


def targetsshow():
    showcount = 0
    showcount = showcount + 1


